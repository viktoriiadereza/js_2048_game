{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(t = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = t;\n        this.copeInitialState = t.map((row)=>[\n                ...row\n            ]);\n        this.board = this.copyState(this.copeInitialState);\n        this.status = \"idle\";\n        this.score = 0;\n        this.moved = false;\n    }\n    copyState(state) {\n        return state.map((row)=>[\n                ...row\n            ]);\n    }\n    getState() {\n        return this.board;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        const newBoard = this.board.map((row)=>this.processRow(row));\n        this.handleMove(newBoard);\n    }\n    moveRight() {\n        if (this.status !== \"playing\") return;\n        const newBoard = this.board.map((row)=>this.processRowRight(row));\n        this.handleMove(newBoard);\n    }\n    moveUp() {\n        if (this.status !== \"playing\") return;\n        const transposedBoard = this.transpose(this.board);\n        const newBoard = transposedBoard.map((row)=>this.processRow(row));\n        this.handleMove(this.transpose(newBoard));\n    }\n    moveDown() {\n        if (this.status !== \"playing\") return;\n        const transposedBoard = this.transpose(this.board);\n        const newBoard = transposedBoard.map((row)=>this.processRowRight(row));\n        this.handleMove(this.transpose(newBoard));\n    }\n    handleMove(newBoard) {\n        if (this.isBoardChanged(this.board, newBoard)) {\n            this.board = newBoard;\n            this.addRandomCell();\n            this.checkWin();\n            this.checkGameOver();\n            this.moved = true;\n        } else this.moved = false;\n    }\n    start() {\n        if (this.status === \"idle\") {\n            this.status = \"playing\";\n            this.addRandomCell();\n            this.addRandomCell();\n        }\n    }\n    restart() {\n        this.board = this.copyState(this.copeInitialState);\n        this.score = 0;\n        this.status = \"idle\";\n        this.moved = false;\n        const messageLose = document.querySelector(\".message-lose\");\n        if (messageLose) messageLose.classList.add(\"hidden\");\n    }\n    addRandomCell() {\n        const emptyCells = [];\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length > 0) {\n            const { row: row, col: col } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[row][col] = Math.random() < 0.1 ? 4 : 2;\n            this.animateCell(row, col);\n        }\n    }\n    processRow(row) {\n        const filteredRow = row.filter((cell)=>cell !== 0);\n        for(let i = 0; i < filteredRow.length - 1; i++)if (filteredRow[i] === filteredRow[i + 1]) {\n            filteredRow[i] *= 2;\n            this.score += filteredRow[i];\n            filteredRow.splice(i + 1, 1);\n        }\n        while(filteredRow.length < 4)filteredRow.push(0);\n        return filteredRow;\n    }\n    processRowRight(row) {\n        const reversedRow = [\n            ...row\n        ].reverse();\n        const processedRow = this.processRow(reversedRow);\n        return processedRow.reverse();\n    }\n    checkGameOver() {\n        if (!this.hasAvailableMoves()) {\n            this.status = \"lose\";\n            const messageLose = document.querySelector(\".message-lose\");\n            if (messageLose) messageLose.classList.remove(\"hidden\");\n        }\n    }\n    checkWin() {\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.board[row][col] === 2048) {\n                this.status = \"win\";\n                const messageWin = document.querySelector(\".message-win\");\n                if (messageWin) messageWin.classList.remove(\"hidden\");\n                return;\n            }\n        }\n    }\n    hasAvailableMoves() {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (this.board[row][col] === 0) return true;\n            if (col < 3 && this.board[row][col] === this.board[row][col + 1]) return true;\n            if (row < 3 && this.board[row][col] === this.board[row + 1][col]) return true;\n        }\n        return false;\n    }\n    isBoardChanged(oldBoard, newBoard) {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (oldBoard[row][col] !== newBoard[row][col]) return true;\n        }\n        return false;\n    }\n    transpose(board) {\n        return board[0].map((_, colIndex)=>board.map((row)=>row[colIndex]));\n    }\n    animateCell(row, col) {\n        const cell = document.querySelector(`.field-row:nth-child(${row + 1}) .field-cell:nth-child(${col + 1})`);\n        if (cell) {\n            cell.classList.add(\"new-cell\");\n            setTimeout(()=>cell.classList.remove(\"new-cell\"), 500);\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const startMessage = document.querySelector(\".message-start\");\n    const startButton = document.querySelector(\".button.start\");\n    startButton.addEventListener(\"click\", ()=>{\n        if ($09e991522ca7e64e$var$game.getStatus() === \"playing\" || $09e991522ca7e64e$var$game.getStatus() === \"lose\") {\n            $09e991522ca7e64e$var$game.restart();\n            startButton.textContent = \"Start\";\n            startButton.classList.remove(\"restart\");\n            if (startMessage) startMessage.classList.remove(\"hidden\");\n        } else {\n            $09e991522ca7e64e$var$game.start();\n            startButton.textContent = \"Restart\";\n            startButton.classList.add(\"restart\");\n            if (startMessage) startMessage.classList.add(\"hidden\");\n        }\n        updateUI();\n    });\n    document.addEventListener(\"keydown\", (ev)=>{\n        if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n        switch(ev.key){\n            case \"ArrowLeft\":\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n            case \"ArrowUp\":\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n        }\n        if ($09e991522ca7e64e$var$game.moved) updateUI();\n    });\n    function updateUI() {\n        const board = $09e991522ca7e64e$var$game.getState();\n        const cells = document.querySelectorAll(\".field-cell\");\n        cells.forEach((cell, index)=>{\n            const row = Math.floor(index / 4);\n            const col = index % 4;\n            const value = board[row][col];\n            cell.className = \"field-cell\";\n            if (value) {\n                cell.classList.add(`field-cell--${value}`);\n                cell.textContent = value;\n            } else cell.textContent = \"\";\n        });\n        document.querySelector(\".game-score\").textContent = $09e991522ca7e64e$var$game.getScore();\n    }\n    updateUI();\n});\n\n\n//# sourceMappingURL=index.776312f2.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const startMessage = document.querySelector('.message-start');\n  const startButton = document.querySelector('.button.start');\n\n  startButton.addEventListener('click', () => {\n    if (game.getStatus() === 'playing' || game.getStatus() === 'lose') {\n      game.restart();\n\n      startButton.textContent = 'Start';\n      startButton.classList.remove('restart');\n\n      if (startMessage) {\n        startMessage.classList.remove('hidden');\n      }\n    } else {\n      game.start();\n\n      startButton.textContent = 'Restart';\n      startButton.classList.add('restart');\n\n      if (startMessage) {\n        startMessage.classList.add('hidden');\n      }\n    }\n\n    updateUI();\n  });\n\n  document.addEventListener('keydown', (ev) => {\n    if (game.getStatus() !== 'playing') {\n      return;\n    }\n\n    switch (ev.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n\n    if (game.moved) {\n      updateUI();\n    }\n  });\n\n  function updateUI() {\n    const board = game.getState();\n    const cells = document.querySelectorAll('.field-cell');\n\n    cells.forEach((cell, index) => {\n      const row = Math.floor(index / 4);\n      const col = index % 4;\n      const value = board[row][col];\n\n      cell.className = 'field-cell';\n\n      if (value) {\n        cell.classList.add(`field-cell--${value}`);\n        cell.textContent = value;\n      } else {\n        cell.textContent = '';\n      }\n    });\n\n    document.querySelector('.game-score').textContent = game.getScore();\n  }\n\n  updateUI();\n});\n","'use strict';\n\nclass Game {\n  constructor(\n    t = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = t;\n    this.copeInitialState = t.map((row) => [...row]);\n    this.board = this.copyState(this.copeInitialState);\n    this.status = 'idle';\n    this.score = 0;\n    this.moved = false;\n  }\n\n  copyState(state) {\n    return state.map((row) => [...row]);\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const newBoard = this.board.map((row) => this.processRow(row));\n\n    this.handleMove(newBoard);\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const newBoard = this.board.map((row) => this.processRowRight(row));\n\n    this.handleMove(newBoard);\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const transposedBoard = this.transpose(this.board);\n    const newBoard = transposedBoard.map((row) => this.processRow(row));\n\n    this.handleMove(this.transpose(newBoard));\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const transposedBoard = this.transpose(this.board);\n    const newBoard = transposedBoard.map((row) => this.processRowRight(row));\n\n    this.handleMove(this.transpose(newBoard));\n  }\n\n  handleMove(newBoard) {\n    if (this.isBoardChanged(this.board, newBoard)) {\n      this.board = newBoard;\n      this.addRandomCell();\n      this.checkWin();\n      this.checkGameOver();\n      this.moved = true;\n    } else {\n      this.moved = false;\n    }\n  }\n\n  start() {\n    if (this.status === 'idle') {\n      this.status = 'playing';\n      this.addRandomCell();\n      this.addRandomCell();\n    }\n  }\n\n  restart() {\n    this.board = this.copyState(this.copeInitialState);\n    this.score = 0;\n    this.status = 'idle';\n    this.moved = false;\n\n    const messageLose = document.querySelector('.message-lose');\n\n    if (messageLose) {\n      messageLose.classList.add('hidden');\n    }\n  }\n\n  addRandomCell() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const { row, col } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[row][col] = Math.random() < 0.1 ? 4 : 2;\n      this.animateCell(row, col);\n    }\n  }\n\n  processRow(row) {\n    const filteredRow = row.filter((cell) => cell !== 0);\n\n    for (let i = 0; i < filteredRow.length - 1; i++) {\n      if (filteredRow[i] === filteredRow[i + 1]) {\n        filteredRow[i] *= 2;\n        this.score += filteredRow[i];\n        filteredRow.splice(i + 1, 1);\n      }\n    }\n\n    while (filteredRow.length < 4) {\n      filteredRow.push(0);\n    }\n\n    return filteredRow;\n  }\n\n  processRowRight(row) {\n    const reversedRow = [...row].reverse();\n    const processedRow = this.processRow(reversedRow);\n\n    return processedRow.reverse();\n  }\n\n  checkGameOver() {\n    if (!this.hasAvailableMoves()) {\n      this.status = 'lose';\n\n      const messageLose = document.querySelector('.message-lose');\n\n      if (messageLose) {\n        messageLose.classList.remove('hidden');\n      }\n    }\n  }\n\n  checkWin() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 2048) {\n          this.status = 'win';\n\n          const messageWin = document.querySelector('.message-win');\n\n          if (messageWin) {\n            messageWin.classList.remove('hidden');\n          }\n\n          return;\n        }\n      }\n    }\n  }\n\n  hasAvailableMoves() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          return true;\n        }\n\n        if (col < 3 && this.board[row][col] === this.board[row][col + 1]) {\n          return true;\n        }\n\n        if (row < 3 && this.board[row][col] === this.board[row + 1][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isBoardChanged(oldBoard, newBoard) {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (oldBoard[row][col] !== newBoard[row][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  transpose(board) {\n    return board[0].map((_, colIndex) => board.map((row) => row[colIndex]));\n  }\n\n  animateCell(row, col) {\n    const cell = document.querySelector(\n      `.field-row:nth-child(${row + 1}) .field-cell:nth-child(${col + 1})`,\n    );\n\n    if (cell) {\n      cell.classList.add('new-cell');\n      setTimeout(() => cell.classList.remove('new-cell'), 500);\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","t","initialState","copeInitialState","map","row","board","copyState","status","score","moved","state","getState","getScore","getStatus","moveLeft","newBoard","processRow","handleMove","moveRight","processRowRight","moveUp","transposedBoard","transpose","moveDown","isBoardChanged","addRandomCell","checkWin","checkGameOver","start","restart","messageLose","document","querySelector","classList","add","emptyCells","col","push","length","Math","floor","random","animateCell","filteredRow","filter","cell","i","splice","reversedRow","reverse","processedRow","hasAvailableMoves","remove","messageWin","oldBoard","_","colIndex","setTimeout","addEventListener","startMessage","startButton","updateUI","cells","querySelectorAll","forEach","index","value","className","textContent","ev","key"],"version":3,"file":"index.776312f2.js.map"}